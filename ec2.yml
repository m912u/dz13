- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    keypair: "aws_ansible"
    instance_type: "t2.micro"
    image: "ami-0bcc094591f354be2"
    group: "mysecgroup"
    region: "us-east-1"

  tasks:
    - name: Создание EC2 instance для сборочной машины
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           keypair={{ keypair }}
           instance_tags='{ "Name":"Buildfarm" , "Group":"buildfarm" }'
           region={{ region }}
           group={{ group }}
           wait=true
      register: ec2_info_build

    - name: Добавляем сборочную машину в группу ec2hosts
      add_host: hostname={{ item.public_ip }} groupname=ec2hosts
      with_items: "{{ ec2_info_build.instances }}"

    - name: Добавляем сборочную машину в группу ec2buildfarm
      add_host: hostname={{ item.public_ip }} groupname=ec2buildfarm
      with_items: "{{ ec2_info_build.instances }}"

    - name: Создание EC2 instance для ПРОД-машины
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           keypair={{ keypair }}
           instance_tags='{ "Name":"App" , "Group":"app" }'
           region={{ region }}
           group={{ group }}
           wait=true
      register: ec2_info_prod

    - name: Добавляем ПРОД в группу ec2hosts
      add_host: hostname={{ item.public_ip }} groupname=ec2hosts
      with_items: "{{ ec2_info_prod.instances }}"

    - name: Добавляем ПРОД в группу ec2app
      add_host: hostname={{ item.public_ip }} groupname=ec2app
      with_items: "{{ ec2_info_prod.instances }}"


    - name: Ожидаем запуска SSH на сборочной машине
      wait_for: host={{ item.public_ip }} port=22 delay=20 timeout=320 state=started
      with_items: "{{ ec2_info_build.instances }}"

    - name: Ожидаем запуска SSH на ПРОД
      wait_for: host={{ item.public_ip }} port=22 delay=20 timeout=320 state=started
      with_items: "{{ ec2_info_prod.instances }}"

    - name: Пишем fingerprint сборочной машины в known hosts
      connection: local
      shell: "ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts"
      with_items: "{{ ec2_info_build.instances }}"

    - name: Пишем fingerprint ПРОД в known hosts
      connection: local
      shell: "ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts"
      with_items: "{{ ec2_info_prod.instances }}"

- hosts: ec2hosts
  gather_facts: no
  user: ubuntu
  become: yes
  pre_tasks:
    - name: Установка pyhton для ansible на инстансы EC2
      raw: apt-get -y install python
    - name: Сборка фактов после установки python
      action: setup

  tasks:
    - name: Устанавливаем необходимые системные пакеты
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Добавляем Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Добавляем Docker APT репозщиторий
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable
        state: present

    - name: Устанавливаем docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Устанавливаем Pip-модуль docker (нужен ansible)
      pip:
        name: docker

- hosts: ec2buildfarm
  gather_facts: yes
  user: ubuntu
  become: yes
  tasks:

  - name: Создаем директорию для credentionals
    file:
      path: /root/.docker
      state: directory

  - name: Копируем dockerhub creds
    copy:
      src: /root/.docker/config.json
      dest: /root/.docker/config.json

  - name: Клорируем репозиторий приложения
    git:
      repo: https://github.com/m912u/dz12_app42fork
      dest: /tmp/src/

  - name: Собираем докер-образ и пушим его в наш репоизторий на Dockerhub
    docker_image:
      build:
        path: /tmp/src/
      repository: m912u/dvps
      name: dvps
      tag: latest
      push: yes
      source: build

 
- hosts: ec2app
  gather_facts: yes
  user: ubuntu
  become: yes
  tasks:

  - name: Создаем контейнер из докер-образа в репозитории
    docker_container:
      name: myapp
      image: 'm912u/dvps:latest'
      published_ports: 
        - 8080:8080
